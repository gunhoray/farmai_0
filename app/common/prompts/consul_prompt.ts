import type { Farm } from "~/+types/farm";

interface ConsultingPromptFarm extends Partial<Farm> {
  size?: number | null;
  crop?: string;
}

// 농가 정보 템플릿 생성 함수
function createFarmInfoString(farm: ConsultingPromptFarm) {
  return `
농장명: ${farm.name}
농장주: ${farm.owner_name}
재배작물: ${farm.crop || '-'}
위치: ${farm.location}
면적: ${farm.size ? `${farm.size}㎡` : '-'}
최근 업데이트: ${new Date(farm.updated_at!).toLocaleDateString()}
`;
}

// 기본 프롬프트 생성 함수
function createBasePrompt(farm: ConsultingPromptFarm) {
  return `
당신은 스마트팜 전문 컨설턴트입니다. 다음 농가 정보를 바탕으로 컨설팅을 진행해주세요:

${createFarmInfoString(farm)}

환경 데이터:
- 주간 온도: 25°C
- 야간 온도: 18°C
- 습도: 65%
- CO2 농도: 800 ppm
- 조도: 15,000 lux
- 외부 온도: 22°C
- 날씨: 맑음

관수 데이터:
- 공급 EC: 2.5 mS/cm
- 공급 pH: 6.2
- 배액 EC: 2.8 mS/cm
- 배액 pH: 6.4
- 수분 함량: 35%
- 공급량: 2.5 L
- 배액량: 1.8 L

생육 데이터:
- 생육 단계: 개화기
- 솎음 작업: 상단 잎 2장 제거, 과실 솎음 작업 완료

병해충 데이터:
- 발생 병해: 흰가루병
- 발생 해충: 진딧물
- 발생 부위: 잎, 줄기
- 발생 정도: 경미
- 방제 방법: 유기농 살충제 사용
- 방제 결과: 방제 후 병해충 발생이 감소함

경영 데이터:
- 생산량: 1,200kg
- 판매량: 1,000kg
- 판매 금액: 8,000,000원
- 생산 비용: 3,500,000원
- 순이익: 4,500,000원

인터뷰 내용:
- 작물 생육 상태가 양호하며, 특히 과실의 당도가 높아 고객 만족도가 높음
- 스마트팜 시스템 도입으로 노동력 절감 및 생산성 향상
- 내년도 시설 확장 계획 수립 중
`;
}

export const CONSULTING_PROMPTS = {
  // 진단 AI 모드 - 데이터 기반 진단
  DIAGNOSIS_MODE: (basePrompt: string) => `
${basePrompt}

**진단 AI 모드**: 제공된 모든 데이터를 기반으로 현재 농가 상태를 객관적으로 진단하고 평가합니다.
다른 모드(요청사항, 분석, 솔루션)의 내용은 절대 포함하지 마세요.

다음 형식으로 답변해주세요:

1. 데이터 기반 종합 진단
- 전체 점수: 0-100점 사이 숫자
- 진단 요약: 데이터 기반 전체적인 진단 한 줄 요약

2. 데이터 분석 결과
환경 관리
- 점수: 0-100점
- 상태: 우수/양호/보통/주의/위험
- 문제점:
  * 구체적 문제점 1
  * 구체적 문제점 2

관수 관리
- 점수: 0-100점
- 상태: 우수/양호/보통/주의/위험
- 문제점:
  * 구체적 문제점 1
  * 구체적 문제점 2

생육 관리
- 점수: 0-100점
- 상태: 우수/양호/보통/주의/위험
- 문제점:
  * 구체적 문제점 1
  * 구체적 문제점 2

병해충 관리
- 점수: 0-100점
- 상태: 우수/양호/보통/주의/위험
- 문제점:
  * 구체적 문제점 1
  * 구체적 문제점 2

3. 데이터 기반 강점
- 강점 1
- 강점 2
- 강점 3

4. 데이터 기반 약점
- 약점 1
- 약점 2
- 약점 3

5. 데이터 기반 위험 요소
- 위험요소 1
- 위험요소 2
  `,

  // 요청 AI 모드 - 진단결과와 인터뷰 기반
  REQUEST_MODE: (basePrompt: string) => `
${basePrompt}

**요청 AI 모드**: 진단 결과와 인터뷰 내용을 기반으로 농가주의 요청사항과 궁금증을 정리하고 우선순위화합니다.
다른 모드(진단, 분석, 솔루션)의 내용은 절대 포함하지 마세요.

다음 형식으로 답변해주세요:

1. 진단 기반 주요 관심사
- 관심사 1
- 관심사 2
- 관심사 3

2. 인터뷰 기반 요구사항
- 요구사항 1
- 요구사항 2
- 요구사항 3

3. 우선순위화된 질문
- 질문: 농가주가 제기한 질문
  * 분류: 환경관리/관수관리/생육관리/병해충관리/경영관리
  * 우선순위: 높음/보통/낮음
  * 복잡도: 단순/복합

4. 잠재적 요구사항
- 표면적으로 드러나지 않은 잠재적 요구사항 1
- 표면적으로 드러나지 않은 잠재적 요구사항 2

5. 컨설팅 집중 영역
- 이번 컨설팅에서 집중해야 할 핵심 영역
  `,

  // 분석 AI 모드 - 요청에 대한 원인 분석
  ANALYSIS_MODE: (basePrompt: string) => `
${basePrompt}

**분석 AI 모드**: 요청사항에 대한 원인을 데이터 기반으로 심층 분석합니다.
다른 모드(진단, 요청사항, 솔루션)의 내용은 절대 포함하지 마세요.

다음 형식으로 답변해주세요:

1. 요청사항별 원인 분석
- 요청사항: [요청사항]
  * 근본 원인:
    - 원인 1
    - 원인 2
  * 데이터 기반 증거:
    - 증거 1
    - 증거 2
  * 영향도: 높음/보통/낮음

2. 데이터 기반 상관관계
- 요소 1과 요소 2의 관계
  * 관계 유형: 정비례/반비례/복합관계
  * 강도: 강함/보통/약함
  * 데이터 기반 설명

3. 요청사항별 해결 가능성
- 요청사항 1
  * 해결 가능성: 높음/보통/낮음
  * 예상 소요 기간
  * 필요 자원

4. 데이터 기반 제약사항
- 제약사항 1
- 제약사항 2
- 제약사항 3

5. 우선 해결 필요 사항
- 사항 1
- 사항 2
- 사항 3
  `,

  // 솔루션 AI 모드 - 최종 해결방안
  SOLUTION_MODE: (basePrompt: string) => `
${basePrompt}

**솔루션 AI 모드**: 분석 결과를 바탕으로 구체적이고 실행 가능한 최종 해결방안을 제시합니다.
다른 모드(진단, 요청사항, 분석)의 내용은 절대 포함하지 마세요.

다음 형식으로 답변해주세요:

1. 최종 해결방안
- 방안 1
  * 실행 방법:
    - 방법 1
    - 방법 2
  * 기대효과
  * 필요 자원
  * 예상 비용

2. 단계별 실행 계획
- 1단계 (1-2주)
  * 세부 작업
  * 담당자
  * 완료 기준
- 2단계 (2-4주)
  * 세부 작업
  * 담당자
  * 완료 기준
- 3단계 (1-3개월)
  * 세부 작업
  * 담당자
  * 완료 기준

3. 성과 지표
- 정량적 지표
  * 지표 1
  * 지표 2
- 정성적 지표
  * 지표 1
  * 지표 2

4. 리스크 관리
- 예상 리스크
  * 리스크 1
  * 리스크 2
- 대응 방안
  * 방안 1
  * 방안 2

5. 후속 조치
- 모니터링 계획
- 평가 시점
- 조정 기준
  `,

  // 종합 AI 모드 - 전체 컨설팅 요약
  SUMMARY_MODE: (basePrompt: string) => `
${basePrompt}

**종합 AI 모드**: 전체 컨설팅 내용을 종합하여 핵심 내용을 요약하고 최종 의견을 제시합니다.
다른 모드의 내용을 종합하여 다음 형식으로 답변해주세요:

1. 컨설팅 요약
- 주요 진단 결과
- 핵심 요청사항
- 중요 분석 내용
- 핵심 해결방안

2. 우선순위별 실행 계획
- 1순위
  * 내용
  * 실행 방법
  * 기대효과
- 2순위
  * 내용
  * 실행 방법
  * 기대효과
- 3순위
  * 내용
  * 실행 방법
  * 기대효과

3. 성공을 위한 핵심 요소
- 요소 1
- 요소 2
- 요소 3

4. 주의사항
- 주의사항 1
- 주의사항 2
- 주의사항 3

5. 최종 의견
- 종합 평가
- 기대효과
- 제언
  `
};

export function getConsultingPrompt(farm: ConsultingPromptFarm) {
  const basePrompt = createBasePrompt(farm);
  return {
    diagnosis: CONSULTING_PROMPTS.DIAGNOSIS_MODE(basePrompt),
    request: CONSULTING_PROMPTS.REQUEST_MODE(basePrompt),
    analysis: CONSULTING_PROMPTS.ANALYSIS_MODE(basePrompt),
    solution: CONSULTING_PROMPTS.SOLUTION_MODE(basePrompt),
    summary: CONSULTING_PROMPTS.SUMMARY_MODE(basePrompt)
  };
} 